year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001"),
state = "DC"
)
dc_poverty <- merge(pov_dc, pop_dc, by = "NAME")
dc_tracts <- merge(pov_dc, health_dc, by = "NAME")
health_insurance <- merge(health_dc, pop_dc, by = "NAME")
plot((dc_poverty$estimate.x / dc_poverty$estimate.y), (health_insurance$estimate.x / health_insurance$estimate.y), xlab = "Poverty Level", ylab = "Health Insurance Coverage")
plot((dc_poverty$estimate.x / dc_poverty$estimate.y), dc_tracts$estimate.y, xlab = "Poverty Level", ylab = "Health Insurance Coverage")
plot((dc_poverty$estimate.x / dc_poverty$estimate.y), (health_insurance$estimate.x / health_insurance$estimate.y), xlab = "Poverty Level (%)", ylab = "Health Insurance Coverage (%)")
#table lists # of people in each census tract below poverty level
health_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B992701_002"),
state = "DC"
)
pov_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B17001_002"),
state = "DC"
)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002"),
state = "DC", output = "wide"
)
View(health_dc)
View(pov_dc)
#table lists # of people in each census tract below poverty level
pov_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B17001_002"),
state = "DC"
)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
View(data_dc)
plot((dc_poverty$estimate.x / dc_poverty$estimate.y), (health_insurance$estimate.x / health_insurance$estimate.y), pch = 16, xlab = "Poverty Level (%)", ylab = "Health Insurance Coverage (%)")
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
data_dc$health_coverage <- (data_dc$healthE / data_dc$popE)
data_dc$pov_level <- (data_dc$povE / data_dc$popE)
data_dc %>% ggplot(aes(x = pov_level, y = health_coverage))
data_dc %>% ggplot(aes(x = pov_level, y = health_coverage)) + geom_point()
data_dc %>% ggplot(aes(x = pov_level, y = health_coverage)) + geom_point() + labs(x = "Poverty Level (%)")
data_dc %>% ggplot(aes(x = pov_level, y = health_coverage)) + geom_point() + labs(x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage)) + geom_point() + labs(x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
install.packages("plotly")
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
ggplotly(fig)
View(fig)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(title = "Health Insurance Coverage vs. Poverty Level", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
data_dc$health_coverage <- (data_dc$healthE / data_dc$popE)
data_dc$pov_level <- (data_dc$povE / data_dc$popE)
library(acs)
library(tidycensus)
library(tidyverse)
census_api_key('9bdb92edb46b046a08d8d8f399977133d0812609', install = TRUE, overwrite = TRUE)
pop_usa <- get_acs(
geography = "state",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001")
)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
data_dc$health_coverage <- (data_dc$healthE / data_dc$popE)
data_dc$pov_level <- (data_dc$povE / data_dc$popE)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(title = "Health Insurance Coverage vs. Poverty Level", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
Hello
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + geom_smooth(method = lm) + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + geom_smooth(method = "lm") + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
knitr::opts_chunk$set(echo = TRUE)
census_api_key('9bdb92edb46b046a08d8d8f399977133d0812609', install = TRUE, overwrite = TRUE)
library(acs)
library(tidycensus)
library(tidyverse)
pop_usa <- get_acs(
geography = "state",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001")
)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
data_dc$health_coverage <- (data_dc$healthE / data_dc$popE)
data_dc$pov_level <- (data_dc$povE / data_dc$popE)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
knitr::opts_chunk$set(echo = TRUE)
census_api_key('9bdb92edb46b046a08d8d8f399977133d0812609', install = TRUE, overwrite = TRUE)
library(acs)
library(tidycensus)
library(tidyverse)
pop_usa <- get_acs(
geography = "state",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001")
)
data_dc <- get_acs(
geography = "tract",
year = 2021,
survey = "acs5",
variables = c(pop = "B01001_001",
pov = "B17001_002",
health = "B992701_002"),
state = "DC", output = "wide"
)
data_dc$health_coverage <- (data_dc$healthE / data_dc$popE)
data_dc$pov_level <- (data_dc$povE / data_dc$popE)
library(plotly)
fig <- data_dc %>% ggplot(aes(x = pov_level, y = health_coverage, label = NAME)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Health Insurance Coverage vs. Poverty Level in DC", x = "Poverty Level (%)", y = "Health Insurance Coverage (%)")
ggplotly(fig)
setwd("~/Desktop/R_training")
setwd("~")
knitr::opts_chunk$set(echo = TRUE)
#loads R text mining package
install.packages("bitops")
install.packages("RCurl")
install.packages("RJSONIO")
install.packages("tm")
install.packages("topicmodels")
install.packages(c("SnowballC", "textstem"))
install.packages("syuzhet")
library(bitops)
library(RCurl)
library(RJSONIO)
library(RColorBrewer)
library(tm)
library(topicmodels)
library(SnowballC)
library(textstem)
library(syuzhet)
inspect(HI_data[1:5])
knitr::opts_chunk$set(echo = TRUE)
#loads R text mining package
install.packages("bitops")
install.packages("RCurl")
install.packages("RJSONIO")
install.packages("tm")
install.packages("topicmodels")
install.packages(c("SnowballC", "textstem"))
install.packages("syuzhet")
library(bitops)
library(RCurl)
library(RJSONIO)
library(RColorBrewer)
library(tm)
library(topicmodels)
library(SnowballC)
library(textstem)
library(syuzhet)
install.packages("bitops")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf)
library(ggplot2) #for geometry
library(dplyr) #for plotting
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson'))
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
#map the Hospitals and urgent care facilities
```
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
#map the Hospitals and urgent care facilities in fairfax
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in fairfax')
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in Fairfax')
#polygon data example: download the population at the tract level from the census
library(tidycensus)
cenus_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
cenus_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609', install = TRUE))
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
ggplot(data = acs, aes(geometry = geometry)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Census tract in Fairfax county')
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
View(hcu_tract)
View(huc_points)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
#libraries
library(sf) #for geometry (point, line, polygon) and operations on geometry
library(ggplot2) #for plotting
library(dplyr)
# Chunk 3
#point data example:Hopitals and urgent care facilities in fairfax
(sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID))
huc_points <- sf::read_sf('https://services1.arcgis.com/ioennV6PpG5Xodq0/ArcGIS/rest/services/OpenData_S1/FeatureServer/5/query?outFields=*&where=1%3D1&f=geojson') %>% select(OBJECTID, TYPE, DESCRIPTION, JURISDICTION, STREET_NUMBER, STREET_NAME, CITY, ZIP, GlobalID)
# Chunk 4
#map the Hospitals and urgent care facilities in fairfax
ggplot(huc_points) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Hospital and urgent care facilities in Fairfax')
# Chunk 5
#polygon data example: download the population at the tract level from the census
library(tidycensus)
census_api_key(Sys.getenv('9bdb92edb46b046a08d8d8f399977133d0812609'))
acs <- data.table::setDT(
tidycensus::get_acs(
state = "VA",
county = '059',
survey = "acs5",
year = 2020,
geography = 'tract',
output = "wide",
variables = 'B01001_001',
geometry = TRUE,
)
)
acs <- st_as_sf(acs)
# Chunk 6
#map the geometry
ggplot(data = acs, aes(geometry = geometry)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Census tract in Fairfax county')
# Chunk 7
# plot population by census tract
ggplot(data = acs, aes(geometry = geometry, fill = B01001_001E)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Population by Census tract in Fairfax county')
# Chunk 8
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
# operation on GIS: assign HCU to census tract
#hcu_tract <- st_join(st_transform(acs, 4269), st_transform(huc_points, 4269), join = st_within, left=TRUE )
#hcu_tract
hcu_tract <- st_join(st_transform(huc_points, 4269), st_transform(acs, 4269), join = st_within)
hcu_tract
hcu_tract <- hcu_tract %>% group_by(GEOID) %>% summarise(HUC_count=length(OBJECTID)) %>% st_drop_geometry()
hcu_tract
hcu_merge <- merge(acs, hcu_tract, by='GEOID')
View(hcu_merge)
# map the number of Hospital and urgent cares facilities by census tracts
ggplot(data = hcu_merge, aes(geometry = geometry, fill = HUC_count)) +
geom_sf() +
labs(x='Latitude', y='Longitude', title='Number of Hospital and Urgent Care Units in Fairfax County')
mastercard <- read_excel("mastercard_data.xlsx")
library(readxl)
library(ggplot2)
mastercard <- read_excel("mastercard_data.xlsx")
setwd("~/Documents/GitHub/biokind_dspg23/Mastercard/Data")
mastercard <- read_excel("mastercard_data.xlsx")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_point() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line(aes(color = "blue")) + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line(aes(color = "blue")) + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line(aes(color = Date)) + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line(aes(color = date)) + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line(aes(color = date)) + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
library(lubridate)
mastercard <- mastercard %>% mutate(month = as_date(month))
library(dplyr)
mastercard <- mastercard %>% mutate(month = as_date(month))
mastercard <- mastercard %>% mutate(Month = as_date(Month))
mastercard <- mastercard %>% mutate(Month = as_date(Month)) %>% mutate(Month = month(Month))
mastercard <- mastercard %>% mutate(Month = as_date(Month))
mastercard <- read_excel("mastercard_data.xlsx")
mastercard <- mastercard %>% mutate(Month = as_date(Month))
mastercard <- mastercard %>% mutate(Month = as_date(Month))
mastercard <- mastercard %>% mutate(Month = as_date(Month)) %>% mutate(newvar1 = month(Month, label = TRUE) )
mastercard <- mastercard %>% mutate(Month = as_date(Month)) %>%
mutate(newvar1 = month(Month, label = TRUE),
newvar2 = year(Month))
mastercard <- mastercard %>% mutate(Month = as_date(Month)) %>%
mutate(newvar1 = month(Month, label = TRUE),
newvar2 = year(Month)) %>%
mutate(Month = paste(newvar1, newvar2))
mastercard <- mastercard %>% mutate(Month = as_date(Month)) %>%
mutate(newvar1 = month(Month, label = TRUE),
newvar2 = year(Month)) %>%
mutate(Month = paste(newvar1, newvar2)) %>%
mutate(Month = as_date(Month))
mastercard <- read_excel("mastercard_data.xlsx")
mastercard <- mastercard %>% mutate(Month = as_date(Month))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month") + scale_x_continuous(n.breaks = 108)
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month") + scale_x_continuous(n.breaks = 9)
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
mastercard <- mastercard %>% mutate(Month = ymd(Month))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") + theme(axis.text.x = element_text(angle = 90))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
scale_x_continuous(n.breaks = 9)
library(dplyr)
library(lubridate)
mastercard <- mastercard %>% mutate(Month = ymd(Month))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#scale_x_continuous(n.breaks = 9)
library(dplyr)
library(lubridate)
#mastercard <- mastercard %>% mutate(Month = ymd(Month))
#what does the donation index mean
colnames(mastercard)
ggplot(data = mastercard, aes(x=Month, y=Number-of-Donations-Y/Y-Growth)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
mastercard <- read_excel("mastercard_data.xlsx")
columns(mastercard)
mastercard <- read_excel("mastercard_data.xlsx")
#what does the donation index mean
colnames(mastercard)
ggplot(data = mastercard, aes(x=Month, y=Number_Donations_Growth)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
library(readxl)
library(ggplot2)
library(dplyr)
library(lubridate)
mastercard <- read_excel("mastercard_data.xlsx")
#what does the donation index mean
colnames(mastercard)
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_point() + labs(x = "Date", y = "Donation Index", title= "Donation Index by Month")
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
mastercard <- mastercard %>% mutate(Month = ymd(Month))
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#scale_x_continuous(n.breaks = 9)
#mastercard <- mastercard %>% mutate(Month = ymd(Month))
ggplot(data = mastercard, aes(x=Month, y=Number_Donations_Growth)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of growth of total count of donation vs. month
ggplot(data = mastercard, aes(x=Month, y=Number_Donations_Growth)) + geom_line() + labs(y = "Donation Index", title= "Donation Count Growth") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of growth of total count of donation vs. month
ggplot(data = mastercard, aes(x=Month, y=Number_Donations_Growth)) + geom_line() + labs(y = "Donation Count Growth", title= "Donation Count Growth") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
columns(mastercard)
colnames(mastercard)
mastercard <- mastercard %>% mutate(Month = ymd(Month))
#Line graph of Donation Index vs. Month
ggplot(data = mastercard, aes(x=Month, y=Donation)) + geom_line() + labs(y = "Donation Index", title= "Donation Index by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of Donation Index Growth vs. Month
ggplot(data = mastercard, aes(x=Month, y=Donation_Index_Growth)) + geom_line() + labs(y = "Donation Index Growth", title= "Donation Index Growth by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of Donation Index 3 Month Avg vs. Month
ggplot(data = mastercard, aes(x=Month, y=Donation_Index_3_Month_Avg)) + geom_line() + labs(y = "Donation Index 3 Month Avg", title= "Donation Index 3 Month Avg") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of growth of Number Donations Growth vs. Month
ggplot(data = mastercard, aes(x=Month, y=Number_Donations_Growth)) + geom_line() + labs(y = "Donation Count Growth", title= "Donation Count Growth by Month") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
#Line graph of growth of Avg Donation Size Growth vs. Month
ggplot(data = mastercard, aes(x=Month, y=Avg_Donation_Size_Growth)) + geom_line() + labs(y = "Avg Donation Size Growth", title= "Avg Donation Size Growth") + scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + theme(axis.text.x = element_text(angle = 90))
